ARG PYTHON_SLIM_VERSION="3.10-slim-bullseye"
##### Builder stage #####
FROM python:${PYTHON_SLIM_VERSION}   
# as builder
# Luo build-time muuttuja Chromen versiolle.
ARG CMAKE_VERSION="3.26.4"
ARG FFMPEG_VERSION="4.2.2"
ARG NGINX_VERSION="1.24.0"
ARG NGINX_RTMP_MODULE_VERSION="1.2.2"
ARG CHROME_VERSION="113.0.5672.126-1"


# Luo ympäristömuuttujat.
ENV DEBIAN_FRONTEND noninteractive
ENV HLS_SEG_DIR /mnt/hls
ENV DASH_SEG_DIR /mnt/dash
ENV REC_DIR /tmp/recording
ENV ROBOT_WORK_DIR /opt/robotframework
ENV ROBOT_DOCKER_DIR /opt/robotframework/docker
ENV ROBOT_REPORTS_DIR /opt/robotframework/reports

# Asenna apt paketit.
RUN apt-get update && apt-get install -yq --no-install-recommends \
    build-essential ca-certificates apt-utils apt-transport-https \
    libssl-dev libpcre3-dev librtmp-dev libtheora-dev libvorbis-dev libvpx-dev libxcb-util-dev \
    libfreetype6-dev libmp3lame-dev librtmp1 libx264-dev libx265-dev \
    libtheora0 libmp3lame0 libncurses5 libxml2-dev \
    libxslt-dev libnss3 libatk-bridge2.0-0 libgbm-dev \
    libz-dev libgtk-3-0 libgconf-2-4 \
    python3-tk python3-dev python3-pip \
    iputils-ping git jq lsb-release python3-pip \
    ffmpeg software-properties-common \
    psmisc xsel unzip tzdata \
    xclip xvfb matchbox xauth \
    wget curl yasm pkg-config dos2unix \
    scrot xorgxrdp xrdp ufw

# Lataa Nginx.
RUN mkdir -p /tmp/build && \
    cd /tmp/build && \
	wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
	tar -zxf nginx-${NGINX_VERSION}.tar.gz && \
	rm nginx-${NGINX_VERSION}.tar.gz

# Lataa nginx-rtmp-module.
RUN cd /tmp/build && \
    wget https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_MODULE_VERSION}.tar.gz && \
    tar -zxf v${NGINX_RTMP_MODULE_VERSION}.tar.gz && \
	rm v${NGINX_RTMP_MODULE_VERSION}.tar.gz

# Asenna Nginx, jossa on mukana nginx-rtmp-module.
RUN cd /tmp/build/nginx-${NGINX_VERSION} && \
    ./configure \
    --sbin-path=/usr/local/sbin/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \		
    --pid-path=/var/run/nginx/nginx.pid \
    --lock-path=/var/lock/nginx.lock \
    --http-client-body-temp-path=/tmp/nginx-client-body \
    --with-http_ssl_module \
    --with-threads \
    --add-module=/tmp/build/nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION} && \
    make -j $(getconf _NPROCESSORS_ONLN) && \
    make install

# Kopio stat.xsl-tiedosto nginx html kanstioon ja siivoa build-kansio.
RUN cp /tmp/build/nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION}/stat.xsl /usr/local/nginx/html/stat.xsl && \
	rm -rf /tmp/build

# Lataa ja asenna Chrome.
RUN wget --no-verbose -O /tmp/chrome.deb https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}_amd64.deb \
    && apt install -y /tmp/chrome.deb \
    && rm /tmp/chrome.deb

# Lataa ja asenna ChromeDriver. Käyttää Chromen versiota sopivan ChromeDriver version asentamiseen.
RUN CHROME_VERSION=$(google-chrome --version) \
    && MAIN_VERSION=${CHROME_VERSION#Google Chrome } && MAIN_VERSION=${MAIN_VERSION%%.*} \
    && CHROMEDRIVER_VERSION=`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE_$MAIN_VERSION` \
    && mkdir -p /opt/chromedriver-$CHROMEDRIVER_VERSION \
    && curl -sS -o /tmp/chromedriver_linux64.zip http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip \
    && unzip -qq /tmp/chromedriver_linux64.zip -d /opt/chromedriver-$CHROMEDRIVER_VERSION  \
    && rm /tmp/chromedriver_linux64.zip \
    && chmod +x /opt/chromedriver-$CHROMEDRIVER_VERSION/chromedriver \
    && ln -fs /opt/chromedriver-$CHROMEDRIVER_VERSION/chromedriver /usr/local/bin/chromedriver

# Lataa ja asenna AzureCLI
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash

# Asenna python paketit.
RUN pip3 install --no-cache-dir \
    robotframework==6.0.2 \
    QWeb

# Aseta aikavyöhyke ja luo .Xauthority tiedosto.
RUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && touch ~/.Xauthority \
    && export TZ=Europe/Helsinki \
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \
    && echo $TZ > /etc/timezone

# Kopioi nginx konfiguraatiotiedosto.
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Kopio robot käynnistys skripti.
COPY docker/run_tests_linux.sh /opt/robotframework/docker/run_tests_linux.sh

# Kopioi html verkkosoitin.
COPY docker/players /usr/local/nginx/html/players

# Agentin isäntäkoneen arkkitehtuuri
ENV TARGETARCH=linux-x64

# Ota käyttöön työkansio.
WORKDIR /azp

# Kopio agentin asennus/käynnistys skripti.
COPY docker/start.sh .

# Muuta skriptit EOL Unix muotoon.
RUN dos2unix /opt/robotframework/docker/run_tests_linux.sh \
    && dos2unix start.sh

# Luo raportti ja työkansiot. Anna käyttöoikeuksia.
RUN mkdir -p ${ROBOT_REPORTS_DIR} \
    && mkdir -p ${ROBOT_WORK_DIR} \
    && mkdir -p ${HLS_SEG_DIR} \
    && mkdir -p ${DASH_SEG_DIR} \
    && mkdir -p ${REC_DIR} \
    && chmod 777 -R ${ROBOT_WORK_DIR} \
    && chmod 777 -R ${ROBOT_REPORTS_DIR} \
    && chmod 777 -R ${HLS_SEG_DIR} \
    && chmod 777 -R ${DASH_SEG_DIR} \
    && chmod 777 -R ${REC_DIR} \
    && chmod 777 /opt/robotframework/docker/run_tests_linux.sh \
    && chmod +x start.sh

# Avaa portit 80,443,3389.
EXPOSE 80
EXPOSE 443
EXPOSE 3389

# Agentin käynnistäminen.
ENTRYPOINT ["./start.sh"]